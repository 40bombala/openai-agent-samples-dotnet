@page "/chat"
@using PromptEngineeringPatterns.Core.Agents.Interfaces
@inject NavigationManager NavigationManager
@inject ISentimentAnalyserAgent SentimentAnalyserAgent
@inject IIntentClassifierAgent IntentClassifierAgent
@inject IKnowledgeOracleAgent KnowledgeOracleAgent

<h3>Chat</h3>
<hr/>

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username"/>
    <button type="button" @onclick="@ChatAsync"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">
                        @if (item.Body.Split('\n').Length > 1)
                        {
                            @foreach (var line in item.Body.Split('\n'))
                            {
                                <br/>
                                @line
                            }
                        }
                        else
                        {
                            @item.Body
                        }
                    </div>
                </div>
            }
        }
        <hr/>
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    // flag to indicate chat status
    private bool _isChatting;

    // name of the user who will be chatting
    private string? _username;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private readonly List<Message> _messages = new();

    // the name of the Assistant
    private readonly string _assistantName = "Forty Bank Oracle";

    private async Task ChatAsync()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            _isChatting = true;
            await Task.Delay(1);

            _messages.Clear();

            await SendAsync($"[Notice] {_username} joined the chat.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void AddMessage(string? name, string message)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            throw new ArithmeticException("Username cannot be null or empty");
        }

        var isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

    // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left the chat.");

            _messages.Clear();
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            AddMessage(_username, message);

            var sentiment = await SentimentAnalyserAgent.Ask(message);

            if (sentiment > -0.5f)
            {
                var response = await KnowledgeOracleAgent.Ask(message);

                AddMessage(_assistantName, response);
            }
            else
            {
                AddMessage(_assistantName, "I'm sorry that you're frustrated with me. I'm still learning.");
            }

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; }
        public string Body { get; }
        public bool Mine { get; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }

}
